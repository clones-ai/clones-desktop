name: 'Build macOS'

# Trigger on pull requests to main branch
on:
  pull_request:
    branches:
      - main
      - 6-create-github-action-workflow-to-package-and-sign-flutter-app-for-macos-linux-and-windows

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - target: 'x86_64-apple-darwin' 
            arch: 'intel'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          cache: true

      - name: Cache Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src-tauri/src/**') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Cache Flutter build
        uses: actions/cache@v4
        with:
          path: |
            build/web/
            .dart_tool/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('lib/**') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-
            ${{ runner.os }}-flutter-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0"

      - name: Create environment files
        env:
          ENV_FILE_LOCAL: ${{ secrets.ENV_FILE_LOCAL }}
        run: |
          echo "$ENV_FILE_LOCAL" > .env.local
          echo "$ENV_FILE_LOCAL" > .env

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --base-href="/"

      - name: Import Apple developer certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported: $CERT_ID"

      - name: Create Apple API key file
        run: echo "${{ secrets.APPLE_API_KEY_FILE }}" > apple_api.p8

      - name: Check Apple notarization connectivity
        run: |
          echo "Testing connectivity to Apple notarization service..."
          curl --fail --connect-timeout 10 --max-time 30 -s https://appstoreconnect.apple.com/ || {
            echo "Warning: Cannot reach Apple services. Will proceed but notarization may fail."
            exit 0
          }
          echo "‚úÖ Apple services reachable"

      - name: Build Tauri app with retry
        run: |
          set -e
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üöÄ Build attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            if cd src-tauri && cargo tauri build --target ${{ matrix.target }}; then
              echo "‚úÖ Build successful on attempt $((RETRY_COUNT + 1))"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ùå Build failed, retrying in 60 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
                sleep 60
              fi
            fi
          done
          
          echo "‚ùå Build failed after $MAX_RETRIES attempts"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS codesigning
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # macOS notarization
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_PATH: ${{ github.workspace }}/apple_api.p8

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clones-desktop-macos-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
name: Build Test Application

on:
  push:
    branches: [ main, change-project-archi ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            artifact_name: 'desktop-app-macos-arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            artifact_name: 'desktop-app-macos-x64'
          - platform: 'windows-latest'
            args: ''
            artifact_name: 'desktop-app-windows-x64'
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
            artifact_name: 'desktop-app-windows-arm64'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'

      - name: Create .env file from secrets
        run: |
          echo "${{ secrets.ENV_FILE_TEST }}" > .env
          echo "✅ Created .env file from secrets"

      - name: Install dependencies
        run: |
          flutter pub get
          cd src-tauri && cargo fetch
          cargo install tauri-cli --version "^2.0.0"

      - name: Build Flutter Web
        run: |
          flutter build web --release
          echo "✅ Flutter Web build complete"

      - name: Prepare build directory for Tauri
        run: |
          mkdir -p build/web
          cp -r web/* build/web/
          echo "✅ Prepared build directory for Tauri"

      - name: Build Tauri application (unsigned)
        run: |
          cd src-tauri
          cargo tauri build ${{ matrix.args }} --config tauri.conf.json
          echo "✅ Tauri build complete for ${{ matrix.platform }}"

      - name: Find built application
        id: find-app
        run: |
          # Debug: List all targets and bundles
          echo "🔍 Searching for built applications..."
          find src-tauri/target -name "bundle" -type d 2>/dev/null || echo "No bundle directories found"
          
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              APP_PATH=$(find src-tauri/target/aarch64-apple-darwin/release/bundle -name "*.app" -type d | head -1)
            else
              APP_PATH=$(find src-tauri/target/x86_64-apple-darwin/release/bundle -name "*.app" -type d | head -1)
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              APP_PATH=$(find src-tauri/target/aarch64-pc-windows-msvc/release/bundle -name "*.exe" | head -1)
            else
              APP_PATH=$(find src-tauri/target/release/bundle -name "*.exe" | head -1)
            fi
          fi
          
          if [ -n "$APP_PATH" ]; then
            echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
            echo "✅ Found application at: $APP_PATH"
          else
            echo "❌ No application found"
            echo "🔍 Available files in target directories:"
            find src-tauri/target -name "*.app" -o -name "*.exe" -o -name "*.dmg" -o -name "*.msi" 2>/dev/null || echo "No applications found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ steps.find-app.outputs.app_path }}
          retention-days: 7

      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ matrix.platform }}
          path: web/
          retention-days: 7

      - name: Show build info
        run: |
          echo "🎉 Build completed for ${{ matrix.platform }}"
          echo "📦 Artifact: ${{ matrix.artifact_name }}"
          echo "🌐 Web build: web-build-${{ matrix.platform }}"
          if [ -n "${{ steps.find-app.outputs.app_path }}" ]; then
            echo "📁 App location: ${{ steps.find-app.outputs.app_path }}"
            ls -la "${{ steps.find-app.outputs.app_path }}"
          fi 
name: Build Test Application

on:
  push:
    branches: [ main, change-project-archi ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  FLUTTER_VERSION: '3.29.3'
  TAURI_CLI_VERSION: '2.1.0'

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            artifact_name: 'desktop-app-macos-arm64'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            artifact_name: 'desktop-app-macos-x64'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            artifact_name: 'desktop-app-windows-x64'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
            artifact_name: 'desktop-app-windows-arm64'
            target: 'aarch64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Validate environment
        shell: bash
        run: |
          echo "🔍 Validating environment..."
          
          # Verify that the secret exists
          if [ -z "${{ secrets.ENV_FILE_TEST }}" ]; then
            echo "❌ ENV_FILE_TEST secret is not set"
            exit 1
          fi
          
          # Verify that the essential files exist
          if [ ! -f "pubspec.yaml" ]; then
            echo "❌ pubspec.yaml not found"
            exit 1
          fi
          
          if [ ! -f "src-tauri/Cargo.toml" ]; then
            echo "❌ src-tauri/Cargo.toml not found"
            exit 1
          fi
          
          if [ ! -f "src-tauri/tauri.test.conf.json" ]; then
            echo "❌ src-tauri/tauri.test.conf.json not found"
            exit 1
          fi
          
          echo "✅ Environment validation complete"

      - name: Create .env file from secrets
        shell: bash
        run: |
          echo "${{ secrets.ENV_FILE_TEST }}" > .env
          echo "✅ Created .env file from secrets"

      - name: Install dependencies
        shell: bash
        run: |
          echo "📦 Installing Flutter dependencies..."
          flutter pub get
          
          echo "📦 Installing Rust dependencies..."
          cd src-tauri && cargo fetch
          
          echo "📦 Installing Tauri CLI..."
          cargo install tauri-cli --version "${{ env.TAURI_CLI_VERSION }}" --locked
          
          echo "✅ All dependencies installed"

      - name: Build Flutter Web
        shell: bash
        run: |
          echo "🌐 Building Flutter Web..."
          flutter build web --release
          
          # Check if the web build exists
          if [ ! -d "build/web" ]; then
            echo "❌ Flutter web build failed - build/web directory not found"
            exit 1
          fi
          
          echo "✅ Flutter Web build complete"

      - name: Prepare build directory for Tauri
        shell: bash
        run: |
          echo "📁 Preparing build directory for Tauri..."
          
          # Create the web directory if it doesn't exist
          mkdir -p web
          
          # Copy the web build to the web directory for Tauri
          cp -r build/web/* web/
          
          # Verify that the files have been copied
          if [ ! -f "web/index.html" ]; then
            echo "❌ Failed to prepare web directory - index.html not found"
            exit 1
          fi
          
          echo "✅ Prepared build directory for Tauri"

      - name: Build Tauri application (unsigned)
        shell: bash
        run: |
          echo "🔨 Building Tauri application for ${{ matrix.platform }}..."
          cd src-tauri
          
          # Build with error handling
          if ! cargo tauri build ${{ matrix.args }} --config tauri.test.conf.json; then
            echo "❌ Tauri build failed"
            exit 1
          fi
          
          echo "✅ Tauri build complete for ${{ matrix.platform }}"

      - name: Find built application
        id: find-app
        shell: bash
        run: |
          echo "🔍 Searching for built applications..."
          
          # Define the search directory based on platform and target
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              BUNDLE_DIR="src-tauri/target/aarch64-apple-darwin/release/bundle"
            else
              BUNDLE_DIR="src-tauri/target/x86_64-apple-darwin/release/bundle"
            fi
            
            # Search for .app first, then .dmg
            APP_PATH=$(find "$BUNDLE_DIR" -name "*.app" -type d | head -1)
            if [ -z "$APP_PATH" ]; then
              APP_PATH=$(find "$BUNDLE_DIR" -name "*.dmg" | head -1)
            fi
            
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              BUNDLE_DIR="src-tauri/target/aarch64-pc-windows-msvc/release/bundle"
            else
              BUNDLE_DIR="src-tauri/target/release/bundle"
            fi
            
            # Search for .exe or .msi
            APP_PATH=$(find "$BUNDLE_DIR" -name "*.exe" | head -1)
            if [ -z "$APP_PATH" ]; then
              APP_PATH=$(find "$BUNDLE_DIR" -name "*.msi" | head -1)
            fi
          fi
          
          # Verify that we found something
          if [ -n "$APP_PATH" ] && [ -e "$APP_PATH" ]; then
            echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
            echo "✅ Found application at: $APP_PATH"
            
            # Display the file info
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              ls -la "$APP_PATH"
            else
              ls -la "$APP_PATH"
            fi
          else
            echo "❌ No application found"
            echo "🔍 Debug: Available files in bundle directories:"
            find src-tauri/target -name "bundle" -type d -exec find {} -name "*.app" -o -name "*.exe" -o -name "*.dmg" -o -name "*.msi" \; 2>/dev/null || echo "No applications found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success() && steps.find-app.outputs.app_path
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ steps.find-app.outputs.app_path }}
          retention-days: 7
          compression-level: 6

      - name: Upload web build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: web-build-${{ matrix.platform }}-${{ matrix.target }}
          path: build/web/
          retention-days: 7
          compression-level: 6

      - name: Show build summary
        shell: bash
        run: |
          echo ""
          echo "🎉 ===== BUILD SUMMARY ====="
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "Artifact: ${{ matrix.artifact_name }}"
          echo "Web build: web-build-${{ matrix.platform }}-${{ matrix.target }}"
          
          if [ -n "${{ steps.find-app.outputs.app_path }}" ]; then
            echo "App location: ${{ steps.find-app.outputs.app_path }}"
            
            # Display the file size
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell -Command "Get-Item '${{ steps.find-app.outputs.app_path }}' | Select-Object Name, Length | Format-Table -AutoSize"
            else
              du -h "${{ steps.find-app.outputs.app_path }}"
            fi
          fi
          
          echo "=========================="
          echo ""

  # Job to create a test release (optional)
  create-test-release:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Display structure of downloaded files
        run: ls -la
        
      - name: Create test release info
        run: |
          echo "# Test Build - $(date)" > release-notes.md
          echo "" >> release-notes.md
          echo "This is an automated test build." >> release-notes.md
          echo "" >> release-notes.md
          echo "## Built applications:" >> release-notes.md
          echo "- macOS ARM64: desktop-app-macos-arm64" >> release-notes.md
          echo "- macOS x64: desktop-app-macos-x64" >> release-notes.md
          echo "- Windows ARM64: desktop-app-windows-arm64" >> release-notes.md
          echo "- Windows x64: desktop-app-windows-x64" >> release-notes.md
          
      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: test-release-summary
          path: release-notes.md
          retention-days: 7